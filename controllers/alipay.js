// Generated by CoffeeScript 1.9.3
(function() {
  var AlipayNotify, Sina, alipay, func_act, func_article, func_card, func_payment, func_user;

  alipay = require('./../alipay_config').alipay;

  AlipayNotify = require('./../alipay_config').AlipayNotify;

  func_payment = __F('payment');

  func_act = __F('act');

  func_user = __F('user');

  func_card = __F('card');

  func_article = __F('article/article');

  Sina = require("./../lib/sdk/sina.js");

  module.exports.controllers = {
    "/create": {
      get: function(req, res, next) {
        return func_payment.getByTradeNum(req.query.trade_num, function(error, payment) {
          if (error) {
            return next(error);
          } else {
            if (payment.target_type === 1) {
              return func_card.getByUserId(payment.target_user_id, function(error, card) {
                var data;
                if (card && card.name && card.tel && card.email) {
                  if (payment.need_address && (!card.address)) {
                    next(new Error('信息不完整，不能付款，需要在花名册中填写收货地址，<a href="/edit-card">编辑花名册</a>'));
                    return;
                  }
                  data = {
                    out_trade_no: payment.trade_num,
                    subject: payment.trade_title,
                    total_fee: payment.trade_price,
                    body: payment.trade_title,
                    show_url: "http://www.html-js.com/act/" + payment.target_uuid,
                    quantity: "1",
                    payment_type: "1",
                    price: payment.trade_price,
                    logistics_fee: "0",
                    logistics_type: "POST",
                    logistics_payment: "SELLER_PAY",
                    receive_name: card.name,
                    receive_address: card.address ? card.address : '无',
                    receive_zip: "123456",
                    receive_mobile: card.tel
                  };
                  return alipay.trade_create_by_buyer(data, res);
                } else {
                  next(new Error('信息不完整，不能付款，需要在花名册中填写真实姓名，邮箱，手机号，<a href="/edit-card">编辑花名册</a>'));
                }
              });
            } else {
              return func_user.getById(payment.target_user_id, function(error, user) {
                var data;
                data = {
                  out_trade_no: payment.trade_num,
                  subject: payment.trade_title,
                  total_fee: payment.trade_price,
                  body: payment.trade_title,
                  show_url: "http://www.html-js.com/article/" + payment.target_uuid,
                  quantity: "1",
                  payment_type: "1",
                  price: payment.trade_price,
                  logistics_fee: "0",
                  logistics_type: "POST",
                  logistics_payment: "SELLER_PAY",
                  receive_name: user.nick,
                  receive_address: '无',
                  receive_zip: "123456",
                  receive_mobile: "12345678901"
                };
                return alipay.trade_create_by_buyer(data, res);
              });
            }
          }
        });
      }
    },
    "/trade_create_by_buyer/notify_url": {
      post: function(req, res, next) {
        console.log(req.body);
        if (true) {
          if (req.body.trade_status === 'WAIT_SELLER_SEND_GOODS' || req.body.trade_status === 'TRADE_FINISHED') {
            return func_payment.getByTradeNum(req.body.out_trade_no, function(error, payment) {
              if (error) {
                console.log(error);
                return res.end('fail');
              } else if (payment.status === 2) {
                return res.end('success');
              } else {
                return payment.updateAttributes({
                  status: 2,
                  buyer_email: req.body.buyer_email,
                  pay_time: new Date(),
                  buyer_id: req.body.buyer_id,
                  trade_no: req.body.trade_no
                }).success(function() {
                  if (payment.target_type === 1) {
                    return func_user.getById(payment.target_user_id, function(error, user) {
                      if (error) {
                        console.log(error);
                        return res.end('fail');
                      } else {
                        return func_act.addJoiner(payment.target_uuid, user, function(error, joiner) {
                          if (error) {
                            result.info = error.message;
                            return res.end('fail');
                          } else {
                            func_act.getById(payment.target_uuid, function(error, act) {
                              var share_txt, sina;
                              if (error) {
                                console.log(error);
                              }
                              if (act) {
                                console.log(act);
                                sina = new Sina(__C.sdks.sina);
                                share_txt = "我在@前端乱炖 报名了【" + act.title + "】的活动，欢迎关注：http://www.html-js.com/act/" + req.params.id;
                                if (act.share_text) {
                                  share_txt = act.share_text;
                                }
                                return sina.statuses.update({
                                  access_token: user.weibo_token,
                                  status: share_txt
                                });
                              }
                            });
                            return res.end('success');
                          }
                        });
                      }
                    });
                  } else if (payment.target_type === 2) {
                    return func_article.addPay(payment.target_uuid, payment.target_user_id, function(e) {
                      if (e) {
                        return res.end('fail');
                      } else {
                        return res.end('success');
                      }
                    });
                  }
                }).error(function(e) {
                  console.log(e);
                  return res.end('fail');
                });
              }
            });
          } else if (req.body.trade_status === 'WAIT_BUYER_PAY') {
            return res.end('success');
          }
        } else {
          return res.end('fail');
        }
      },
      get: function(req, res, next) {}
    },
    "/trade_create_by_buyer/return_url": {
      get: function(req, res, next) {
        return func_payment.getByTradeNumNoCheck(req.query.out_trade_no, function(error, payment) {
          if (error) {
            return next(error);
          } else {
            if (payment.target_type === 1) {
              return res.redirect('/act/' + payment.target_uuid);
            } else if (payment.target_type === 2) {
              return res.redirect('/article/' + payment.target_uuid);
            }
          }
        });
      }
    }
  };

}).call(this);
