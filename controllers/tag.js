// Generated by CoffeeScript 1.9.3
(function() {
  var func_tag, pagedown, safeConverter;

  func_tag = __F('tag');

  pagedown = require("pagedown-htmljs");

  safeConverter = pagedown.getSanitizingConverter();

  module.exports.controllers = {
    '/': {
      get: function(req, res, next) {
        return res.render('tag/index.jade');
      }
    },
    '.json': {
      get: function(req, res, next) {
        return res.send(res.locals.tags)
      }
    },
    "/add": {
      get: function(req, res, next) {
        return res.render('tag/add.jade');
      },
      post: function(req, res, next) {
        req.body.desc = safeConverter.makeHtml(req.body.desc_md);
        return func_tag.add(req.body, function(error, tag) {
          if (error) {
            return next(error);
          } else {
            return res.redirect('/tag');
          }
        });
      }
    },
    "/:id": {
      get: function(req, res, next) {
        return func_tag.getById(req.params.id, function(error, tag) {
          if (error) {
            return next(error);
          } else if (!tag) {
            return next(new Error('不存在的标签'));
          } else {
            return func_tag.getQuestionsById(tag.id, 1, 20, function(error, qt) {
              res.locals.qts = qt;
              res.locals.tag = tag;
              return res.render('tag/tag.jade');
            });
          }
        });
      }
    },
    "/:id/articles": {
      get: function(req, res, next) {
        var count, page;
        page = req.query.page || 1;
        count = req.query.count || 20;
        return func_tag.getById(req.params.id, function(error, tag) {
          if (error) {
            return next(error);
          } else if (!tag) {
            return next(new Error('不存在的标签'));
          } else {
            return func_tag.countArticles(tag.id, function(error, _count) {
              if (error) {
                return next(error);
              } else {
                return func_tag.getArticlesById(tag.id, page, count, function(error, qt) {
                  res.locals.articles = qt;
                  res.locals.tag = tag;
                  res.locals.total = _count;
                  res.locals.totalPage = Math.ceil(_count / count);
                  res.locals.page = req.query.page || 1;
                  return res.render('tag/tag-article.jade');
                });
              }
            });
          }
        });
      }
    },
    "/n/:name": {
      get: function(req, res, next) {
        return func_tag.getByName(req.params.name, function(error, tag) {
          if (error) {
            return next(error);
          } else if (!tag) {
            return next(new Error('不存在的标签'));
          } else {
            return func_tag.getQuestionsById(tag.id, 1, 20, function(error, qt) {
              res.locals.qts = qt;
              res.locals.tag = tag;
              return res.render('tag/tag.jade');
            });
          }
        });
      }
    },
    "/:id/edit": {
      get: function(req, res, next) {
        return func_tag.getById(req.params.id, function(error, tag) {
          if (error) {
            return next(error);
          } else {
            res.locals.tag = tag;
            return res.render('tag/add.jade');
          }
        });
      },
      post: function(req, res, next) {
        return next(new Error('不支持修改'));
        req.body.desc = safeConverter.makeHtml(req.body.desc_md);
        return func_tag.update(req.body.id, req.body, function(error, tag) {
          if (error) {
            return next(error);
          } else {
            return res.redirect('/tag');
          }
        });
      }
    }
  };

  module.exports.filters = {
    "/": {
      get: ['freshLogin', 'tag/all-tags']
    },
    ".json": {
      get: [ 'tag/all-tags']
    },
    "/:id": {
      get: ['freshLogin']
    },
    "/add": {
      get: ["checkLogin"],
      post: ["checkLogin"]
    }
  };

}).call(this);
