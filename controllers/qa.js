// Generated by CoffeeScript 1.9.3
(function() {
  var Sina, add_history, en_func, func_answer, func_card, func_channel, func_channel_user, func_comment, func_email, func_info, func_question, func_search, func_tag, func_topic, func_user, moment, pagedown, safeConverter, sina;

  func_question = __F('question');

  func_answer = __F('answer');

  func_info = __F('info');

  func_user = __F('user');

  func_topic = __F('topic');

  func_email = __F('email');

  func_comment = __F('comment');

  func_tag = __F('tag');

  func_card = __F('card');

  func_search = __F('search');

  func_channel = __F('qa/channel');

  func_channel_user = __F('qa/channel_users');

  pagedown = require("pagedown-htmljs");

  safeConverter = new pagedown.Converter();

  pagedown.Extra.init(safeConverter);

  moment = require('moment');

  Sina = require("./../lib/sdk/sina.js");

  sina = new Sina(__C.sdks.sina);

  en_func = require('./../lib/translate.coffee');

  add_history = {};

  module.exports.controllers = {
    "/": {
      get: function(req, res, next) {
        res.locals.now_page = req.query.page;
        return res.render('qa/index.jade');
      }
    },
    "/user/:id": {
      get: function(req, res, next) {
        return res.render('qa/index.jade');
      }
    },
    "/add": {
      get: function(req, res, next) {
        res.locals.channel_id = req.query.channel_id || '';
        return res.render('qa/add.jade');
      },
      post: function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        req.body.html = safeConverter.makeHtml(req.body.md);
        req.body.user_id = res.locals.user.id;
        req.body.user_headpic = res.locals.user.head_pic;
        req.body.user_nick = res.locals.user.nick;
        if (/小姐|援交|小妹|公主/.test(req.body.title)) {
          result.info = "能免费提供给群主么？";
          res.send(result);
          return;
        }
        if (add_history[req.body.user_id]) {
          if (new Date().getTime() - add_history[req.body.user_id] < 1000 * 60 * 5) {
            result.info = "不要发布太频繁哦，稍后再试";
            res.send(result);
            return;
          }
        }
        add_history[req.body.user_id] = new Date().getTime();
        if (!req.body.md || !req.body.title) {
          result.info = "问题内容和标题不能为空";
          res.send(result);
          return;
        }
        if (!req.body.channel_id) {
          result.info = "必须选择一个问题分类";
          res.send(result);
          return;
        }
        return func_question.add(req.body, function(error, q) {
          var emails;
          if (error) {
            result.info = error.message;
          } else {
            result.success = 1;
            (__F('index')).add(q.uuid);
            if (req.body.tags) {
              func_question.addTagsToQuestion(q.id, req.body.tags.split(","));
            }
            func_channel.addCount(req.body.channel_id, "qa_count");
            (__F('coin')).add(20, res.locals.user.id, "发布了一条问题");
            if (req.body.to_weibo) {
              sina.statuses.update({
                access_token: res.locals.user.weibo_token,
                status: '我在@前端乱炖 发起了一个问题，求解答：【' + q.title + '】，点击查看或者回答问题：http://www.html-js.com/qa/' + q.id
              });
            }
            if (req.body.invites) {
              emails = [];
              func_user.getByUserIds(req.body.invites.split(","), function(error, users) {
                if (users) {
                  users.forEach(function(user) {
                    func_info.add({
                      target_user_id: user.user_id,
                      type: 10,
                      source_user_id: q.user_id,
                      source_user_nick: q.user_nick,
                      time: new Date(),
                      target_path: "/qa/" + q.id,
                      action_name: "【邀请】您回答问题",
                      target_path_name: q.title
                    });
                    if (user.card && user.card.email) {
                      return emails.push(user.card.email.toString());
                    }
                  });
                }
                console.log(emails);
                return func_email.sendQAInvite(q, emails.join(";"));
              });
            }
            func_search.add({
              type: "qa",
              "pid": q.uuid,
              "title": q.title,
              "html": q.html.replace(/<[^>]*>/g, ""),
              "udid": q.uuid,
              "id": q.id
            }, function() {});
            en_func(q.title, function(en) {
              return func_question.update(q.id, {
                pinyin: en
              });
            });
          }
          return res.send(result);
        });
      }
    },
    "/:id/comment": {
      get: function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        return func_comment.getAllByTargetId("qa_" + req.params.id, 1, 20, null, function(error, comments) {
          if (error) {
            result.info = error.message;
          } else {
            result.comments = comments;
            result.success = 1;
          }
          return res.send(result);
        });
      },
      "post": function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        return func_answer.addComment(req.params.id, res.locals.user.id, res.locals.user.nick, req.body.content, function(error, comment) {
          if (error) {
            result.info = error.message;
          } else {
            result.comment = comment.selectedValues;
            result.comment.user = res.locals.user;
            result.success = 1;
          }
          return res.send(result);
        });
      }
    },
    "/:id": {
      "get": function(req, res, next) {
        func_question.addCount(req.params.id, 'visit_count', (function() {}), 2);
        if (res.locals.question.channel_id) {
          func_channel.addCount(res.locals.question.channel_id, "visit_count", (function() {}), 2);
        }
        return res.render('qa/qa.jade');
      }
    },
    "/:id/update": {
      "get": function(req, res, next) {
        return func_question.update(req.params.id, req.query, function(error, question) {
          if (error) {
            return next(error);
          } else {
            return res.redirect('back');
          }
        });
      }
    },
    "/answer/:id/update": {
      "get": function(req, res, next) {
        return func_answer.update(req.params.id, req.query, function(error, question) {
          if (error) {
            return next(error);
          } else {
            return res.redirect('back');
          }
        });
      }
    },
    "/:id/edit": {
      "get": function(req, res, next) {
        return func_question.getById(req.params.id, function(error, question) {
          if (error) {
            return next(error);
          } else if (!question) {
            return next(new Error('不存在的问题'));
          } else {
            res.locals.question = question;
            return res.render('qa/edit-question.jade');
          }
        });
      },
      "post": function(req, res, next) {
        req.body.html = safeConverter.makeHtml(req.body.md);
        return func_question.update(req.params.id, req.body, function(error, question) {
          if (error) {
            return next(error);
          } else {
            if (!req.body.reason) {
              return next(new Error('必须填写修改原因'));
            } else {
              return func_question.addEditHistory(question.id, res.locals.user.id, req.body.reason, function(error, qeh) {
                func_info.add({
                  target_user_id: question.user_id,
                  type: 7,
                  source_user_id: res.locals.user.id,
                  source_user_nick: res.locals.user.nick,
                  time: new Date(),
                  target_path: "/qa/" + question.id,
                  action_name: "【修改】了您提问的问题",
                  target_path_name: question.title
                });
                if (req.body.tags) {
                  func_question.addTagsToQuestion(question.id, req.body.tags.split(","));
                }
                return res.redirect('/qa/' + req.params.id);
              });
            }
          }
        });
      }
    },
    "/answer/:id/edit": {
      get: function(req, res, next) {
        return func_answer.getByIdWithQuestion(req.params.id, function(error, ans) {
          if (error) {
            return next(error);
          } else if (!ans) {
            return next(new Error('不存在的回答'));
          } else if (!res.locals.user.is_admin && ans.user_id !== res.locals.user.id) {
            return next(new Error('没有权限，这不是您发布的回答'));
          } else {
            res.locals.answer = ans;
            return res.render('qa/edit-answer.jade');
          }
        });
      },
      "post": function(req, res, next) {
        req.body.html = safeConverter.makeHtml(req.body.md);
        return func_answer.update(req.params.id, req.body, function(error) {
          if (error) {
            return next(error);
          } else {
            func_question.getById(req.body.question_id, function(error, question) {
              if (question) {
                return func_info.add({
                  target_user_id: question.user_id,
                  type: 7,
                  source_user_id: res.locals.user.id,
                  source_user_nick: res.locals.user.nick,
                  time: new Date(),
                  target_path: "/qa/" + question.id + "#answer-" + req.params.id,
                  action_name: "【修改】了TA针对您问题的回答",
                  target_path_name: question.title,
                  content: req.body.html
                });
              }
            });
            return res.redirect('/qa/' + req.body.question_id + "#answer-" + req.params.id);
          }
        });
      }
    },
    "/answer/:id/comment": {
      get: function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        return func_answer.getCommentsByAnswerId(req.params.id, function(error, comments) {
          if (error) {
            result.info = error.message;
          } else {
            result.comments = comments;
            result.success = 1;
          }
          return res.send(result);
        });
      },
      "post": function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        return func_answer.addComment(req.params.id, res.locals.user.id, res.locals.user.nick, req.body.content, function(error, comment) {
          if (error) {
            result.info = error.message;
          } else {
            result.comment = comment.selectedValues;
            result.comment.user = res.locals.user;
            result.success = 1;
          }
          return res.send(result);
        });
      }
    },
    "/answer/:id/zan": {
      get: function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        return func_answer.getZan(req.params.id, function(error, his) {
          if (error) {
            result.info = error.message;
          } else {
            result.success = 1;
            result.users = his.users;
          }
          return res.send(result);
        });
      },
      post: function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        return func_answer.addZan(req.params.id, res.locals.user, function(error, ans) {
          if (error) {
            result.info = error.message;
          } else {
            (__F('coin')).add(5, ans.user_id, res.locals.user.nick + " 顶了你的回答");
            func_info.add({
              target_user_id: ans.user_id,
              type: 4,
              source_user_id: res.locals.user.id,
              source_user_nick: res.locals.user.nick,
              time: new Date(),
              target_path: "/qa/" + ans.question_id + "#answer-" + ans.id,
              action_name: "【赞】了您的回答，获得 5 经验值",
              target_path_name: ans.md.substr(0, 100)
            });
            result.success = 1;
            result.answer = ans;
          }
          return res.send(result);
        });
      }
    },
    "/:id/add": {
      post: function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        req.body.html = safeConverter.makeHtml(req.body.md);
        req.body.user_id = res.locals.user.id;
        req.body.user_headpic = res.locals.user.head_pic;
        req.body.user_nick = res.locals.user.nick;
        req.body.question_id = req.params.id;
        return func_answer.add(req.body, function(error, q, ans) {
          if (error) {
            result.info = error.message;
          } else {
            result.success = 1;
            func_info.add({
              target_user_id: q.user_id,
              type: 5,
              source_user_id: res.locals.user.id,
              source_user_nick: res.locals.user.nick,
              time: new Date(),
              target_path: "/qa/" + q.id,
              action_name: "【回答】了您提问的问题",
              target_path_name: q.title,
              content: req.body.html
            });
            func_card.getByUserId(q.user_id, function(error, card) {
              if (card) {
                return func_email.sendAnswer(ans, q, card);
              }
            });
            func_search.add({
              parent_id: ans.question_id,
              type: "answer",
              "pid": 'answer_' + ans.id,
              "title": q.title + "的回答",
              "html": ans.html.replace(/<[^>]*>/g, ""),
              "udid": '',
              "id": ans.id
            }, function() {});
          }
          return res.send(result);
        });
      }
    },
    "/:question_id/good/:answer_id": {
      get: function(req, res, next) {
        return func_question.update(req.params.question_id, {
          good_answer_id: req.params.answer_id
        }, function(error, question) {
          if (error) {
            return next(error);
          } else {
            return func_answer.getById(req.params.answer_id, function(error, answer) {
              if (answer) {
                (__F('coin')).add(20, answer.user_id, res.locals.user.nick + " 采纳了你的回答");
                func_info.add({
                  target_user_id: answer.user_id,
                  type: 9,
                  source_user_id: res.locals.user.id,
                  source_user_nick: res.locals.user.nick,
                  time: new Date(),
                  target_path: "/qa/" + question.id + "#answer-" + answer.id,
                  action_name: "【采纳】了你的回答，获得 20 经验值",
                  target_path_name: answer.md.substr(0, 100)
                });
              }
              return res.redirect('back');
            });
          }
        });
      }
    },
    "/:question_id/move_to_topic": {
      get: function(req, res, next) {
        if (!res.locals.user.is_admin) {
          return next(new Error('没有权限'));
        } else {
          return func_question.getById(req.params.question_id, function(error, question) {
            if (error) {
              return next(error);
            } else {
              return func_topic.add({
                title: question.title,
                md: question.md,
                html: question.html,
                user_id: question.user_id,
                user_nick: question.user_nick,
                user_headpic: question.user_headpic,
                last_comment_time: new Date(),
                uuid: question.uuid
              }, function(error, topic) {
                return func_question["delete"](question.id, function(error) {
                  if (error) {
                    return next(error);
                  } else {
                    return res.redirect('/topic');
                  }
                });
              });
            }
          });
        }
      }
    },
    "/channel/:id/join": {
      post: function(req, res, next) {
        var result;
        result = {
          success: 0
        };
        if (res.locals.card) {
          if (res.locals.card.email) {
            console.log(res.locals.user);
            return func_channel_user.checkAlready(req.params.id, res.locals.user.id, function(error) {
              if (error) {
                result.info = error.message;
                res.send(result);
              } else {
                return func_channel_user.add({
                  channel_id: req.params.id,
                  user_id: res.locals.user.id,
                  user_nick: res.locals.user.nick,
                  user_headpic: res.locals.user.head_pic,
                  user_desc: res.locals.user.desc
                }).success(function() {
                  result.success = 1;
                  return res.send(result);
                }).error(function(e) {
                  result.info = e.message;
                  res.send(result);
                });
              }
            });
          } else {
            result.info = '必须在花名册中填写邮箱地址';
            res.send(result);
          }
        } else {
          result.info = '必须填写花名册';
          res.send(result);
        }
      }
    }
  };

  module.exports.filters = {
    "/": {
      get: ['freshLogin', 'qa/all-question', 'qa/hot-question', 'qa/recent-answers', 'qa/all-channels-ifonlyone']
    },
    "/user/:id": {
      get: ['freshLogin', 'who', 'qa/his-questions', 'qa/hot-question', 'qa/recent-answers']
    },
    "/add": {
      get: ['checkLogin', 'tag/all-tags', 'qa/all-channels', 'qa/get-add-pros'],
      post: ['checkLoginJson']
    },
    "/:id/update": {
      get: ['checkLogin', 'checkAdmin']
    },
    "/answer/:id/update": {
      get: ['checkLogin', 'checkAdmin']
    },
    "/:id": {
      get: ['freshLogin', 'qa/get-question', 'qa/get-answers', 'qa/all-edit-history', 'qa/same-questions', 'qa/favs', 'qa/get-channel', 'book/some-books']
    },
    "/:id/edit": {
      get: ['checkLogin', 'tag/all-tags', 'qa/all-channels'],
      post: ['checkLogin']
    },
    "/answer/:id/edit": {
      get: ['checkLogin'],
      post: ['checkLogin']
    },
    "/:id/add": {
      post: ['checkLoginJson']
    },
    "/answer/:id/zan": {
      post: ['checkLoginJson']
    },
    "/answer/:id/comment": {
      post: ['checkLoginJson']
    },
    "/:question_id/good/:answer_id": {
      get: ['checkLogin']
    },
    "/:question_id/move_to_topic": {
      get: ['checkLogin']
    },
    "/channel/:id/join": {
      post: ['checkLoginJson', 'checkCard']
    }
  };

}).call(this);
