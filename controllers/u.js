// Generated by CoffeeScript 1.9.3
(function() {
  var func_url;

  func_url = __F('url');

  module.exports.controllers = {
    "/": {
      get: function(req, res, next) {
        return func_url.count(condition, function(error, count) {
          if (error) {
            return next(error);
          } else {
            res.locals.total = count;
            res.locals.totalPage = Math.ceil(count / 20);
            res.locals.page = req.query.page || 1;
            return func_url.getAll(res.locals.page, 20, {}, "visit_count desc", function(error, urls) {
              res.locals.urls = urls;
              return res.render('urls.jade');
            });
          }
        });
      }
    },
    "/add": {
      get: function(req, res, next) {
        if (req.query.url) {
          return func_url.getByPath(req.query.url, function(error, u) {
            if (u) {
              return res.send(u);
            } else {
              return func_url.add({
                path: req.query.url
              }, function(error, u) {
                if (error) {
                  next(error);
                  return;
                }
                return func_url.getUUSById(u.id, function(error, uus) {
                  if (error) {
                    return next(error);
                  } else {
                    return func_url.update(u.id, {
                      key: uus.key
                    }, function(error, url) {
                      if (error) {
                        return next(error);
                      } else {
                        return res.send(url);
                      }
                    });
                  }
                });
              });
            }
          });
        } else {
          return next(new Error('错误的参数'));
        }
      }
    },
    "/:id": {
      get: function(req, res, next) {
        return func_url.getByKey(req.params.id, function(error, u) {
          if (u) {
            func_url.addCount(u.id, ['visit_count']);
            return res.redirect(u.path);
          } else {
            return next(error);
          }
        });
      }
    }
  };

}).call(this);
