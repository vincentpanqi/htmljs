// Generated by CoffeeScript 1.9.3
(function() {
  var Article, ArticleTag, Question, QuestionTag, Tag, func_tag;

  Tag = __M('tags');

  Question = __M('questions');

  QuestionTag = __M('question_tag');

  Question.hasMany(QuestionTag, {
    foreignKey: "questionId"
  });

  QuestionTag.belongsTo(Question, {
    foreignKey: "questionId"
  });

  QuestionTag.sync();

  ArticleTag = __M('article_tag');

  Article = __M('articles');

  Article.hasMany(ArticleTag, {
    foreignKey: "articleid"
  });

  ArticleTag.belongsTo(Article, {
    foreignKey: "articleid"
  });

  ArticleTag.sync();

  Tag.sync();

  Question.sync();

  func_tag = {
    countArticles: function(id, callback) {
      return ArticleTag.count({
        where: {
          tagid: id
        }
      }).success(function(c) {
        return callback(null, c);
      }).error(function(e) {
        return callback(e);
      });
    },
    getByName: function(name, callback) {
      return Tag.find({
        where: {
          name: name
        }
      }).success(function(tag) {
        if (!tag) {
          return callback(new Error('不存在的标签'));
        } else {
          return callback(null, tag);
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    getQuestionsById: function(id, page, count, callback) {
      return QuestionTag.findAll({
        where: {
          tagId: id
        },
        include: [Question]
      }).success(function(qt) {
        return callback(null, qt);
      }).error(function(e) {
        return callback(e);
      });
    },
    getArticlesById: function(id, page, count, callback) {
      return ArticleTag.findAll({
        where: {
          tagid: id
        },
        offset: (page - 1) * count,
        limit: count,
        include: [Article]
      }).success(function(as) {
        return callback(null, as);
      }).error(function(e) {
        return callback(e);
      });
    },
    getTagsByIds: function(ids, callback) {
      return Tag.findAll({
        where: {
          id: ids
        }
      }).success(function(tags) {
        return callback(null, tags);
      }).error(function(e) {
        return callback(e);
      });
    },
    getQuestionsByTagNames: function(tagNames, page, count, callback) {
      if (tagNames.length === 0) {
        return callback(null, []);
      } else {
        return Tag.findAll({
          where: {
            name: tagNames
          }
        }).success(function(tags) {
          var tagIds;
          tagIds = [];
          tags.forEach(function(tag) {
            return tagIds;
          });
          return QuestionTag.findAll({
            where: {
              id: tagNames
            },
            order: 'id desc',
            include: [Question]
          }).success(function(qt) {
            return callback(null, qt);
          }).error(function(e) {
            return callback(e);
          });
        }).error(function(e) {
          return callback(e);
        });
      }
    }
  };

  __FC(func_tag, Tag, ['getAll', 'add', 'update', 'getById', 'addCount']);

  module.exports = func_tag;

}).call(this);
