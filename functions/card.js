// Generated by CoffeeScript 1.9.3
(function() {
  var Card, CardZanHistory, User, Visit_log, func_card;

  Card = __M('cards');

  Visit_log = __M('card_visit_log');

  User = __M('users');

  CardZanHistory = __M('card_zan_history');

  User.hasOne(Card, {
    foreignKey: "user_id"
  });

  Card.belongsTo(User, {
    foreignKey: "user_id"
  });

  User.hasOne(CardZanHistory, {
    foreignKey: "user_id"
  });

  CardZanHistory.belongsTo(User, {
    foreignKey: "user_id"
  });

  Card.sync();

  User.sync();

  Visit_log.sync();

  CardZanHistory.sync();

  User.sync();

  func_card = {
    getByUserId: function(id, callback) {
      return Card.find({
        where: {
          user_id: id
        },
        raw: true
      }).success(function(card) {
        return callback(null, card);
      }).error(function(error) {
        return callback(error);
      });
    },
    getByUUID: function(id, callback) {
      return Card.find({
        where: {
          uuid: id
        },
        include: [User],
        raw: true
      }).success(function(card) {
        return callback(null, card);
      }).error(function(error) {
        return callback(error);
      });
    },
    addVisit: function(cardId, visitor) {
      return Card.find({
        where: {
          id: cardId
        }
      }).success(function(card) {
        if (card) {
          card.updateAttributes({
            visit_count: card.visit_count ? card.visit_count + 1 : 1
          });
          if (visitor) {
            return Visit_log.find({
              where: {
                card_id: cardId,
                user_id: visitor.id
              }
            }).success(function(v) {
              if (v) {
                return v.updateAttributes({
                  user_headpic: visitor.head_pic
                });
              } else {
                return Visit_log.create({
                  card_id: cardId,
                  user_id: visitor.id,
                  user_nick: visitor.nick,
                  user_headpic: visitor.head_pic
                });
              }
            });
          }
        }
      });
    },
    getVisitors: function(cardId, callback) {
      return Visit_log.findAll({
        where: {
          card_id: cardId
        },
        limit: 27,
        order: "updatedAt desc",
        raw: true
      }).success(function(logs) {
        return callback(null, logs);
      }).error(function(error) {
        return callback(error);
      });
    },
    getZans: function(cardId, callback) {
      return CardZanHistory.findAll({
        where: {
          card_id: cardId
        },
        limit: 50,
        include: [User],
        raw: true
      }).success(function(zans) {
        return callback(null, zans);
      }).error(function(e) {
        return callback(e);
      });
    },
    addZan: function(cardId, userId, callback) {
      return CardZanHistory.find({
        where: {
          card_id: cardId,
          user_id: userId
        },
        raw: true
      }).success(function(his) {
        if (his) {
          return callback(new Error('已经给这位【大叔/阿姨】点过赞了，如果你点上瘾了，那为毛放弃治疗！'));
        } else {
          CardZanHistory.create({
            card_id: cardId,
            user_id: userId
          });
          return Card.find({
            where: {
              id: cardId
            }
          }).success(function(card) {
            if (card) {
              card.updateAttributes({
                zan_count: card.zan_count ? card.zan_count + 1 : 1
              });
            }
            return callback(null, card);
          }).error(function(e) {
            return callback(e);
          });
        }
      });
    },
    addComment: function(cardId) {
      return Card.find({
        where: {
          id: cardId
        }
      }).success(function(card) {
        if (card) {
          return card.updateAttributes({
            comment_count: card.comment_count ? card.comment_count + 1 : 1
          });
        }
      }).error(function(e) {});
    },
    getHots: function(callback) {
      return Card.findAll({
        offset: 0,
        limit: 10,
        order: "visit_count desc",
        raw: true
      }).success(function(cards) {
        return callback(null, cards);
      }).error(function(error) {
        return callback(error);
      });
    },
    getRecents: function(callback) {
      return Card.findAll({
        offset: 0,
        limit: 10,
        order: "id desc",
        raw: true
      }).success(function(cards) {
        return callback(null, cards);
      }).error(function(error) {
        return callback(error);
      });
    },
    getAll: function(page, count, condition, desc, callback) {
      var query;
      if (arguments.length === 4) {
        callback = desc;
        desc = "user.coin desc,cards.zan_count+cards.visit_count desc";
      }
      query = {
        offset: (page - 1) * count,
        limit: count,
        order: desc,
        include: [User],
        raw: true
      };
      if (condition) {
        query.where = condition;
      }
      return Card.findAll(query).success(function(ms) {
        return callback(null, ms);
      }).error(function(e) {
        return callback(e);
      });
    }
  };

  __FC(func_card, Card, ['update', 'count', 'delete', 'getById', 'add']);

  module.exports = func_card;

}).call(this);
