// Generated by CoffeeScript 1.9.3
(function() {
  var Ans, AnsZanHistory, Card, Comment, Question, User, func_answer, func_info, func_user;

  Ans = __M('answers');

  Ans.sync();

  AnsZanHistory = __M('answer_zan_history');

  AnsZanHistory.sync();

  Question = __M('questions');

  Comment = __M('answer_comment');

  Comment.sync();

  User = __M('users');

  Card = __M('cards');

  Question.hasMany(Ans, {
    foreignKey: "question_id"
  });

  Ans.belongsTo(Question, {
    foreignKey: "question_id"
  });

  User.hasOne(Comment, {
    foreignKey: "user_id"
  }).hasOne(Ans, {
    foreignKey: "user_id"
  });

  Comment.belongsTo(User, {
    foreignKey: "user_id"
  });

  Ans.hasMany(Comment, {
    foreignKey: "answer_id"
  });

  Comment.belongsTo(Ans, {
    foreignKey: "answer_id"
  });

  Ans.hasMany(AnsZanHistory, {
    foreignKey: "answer_id"
  });

  AnsZanHistory.belongsTo(Ans, {
    foreignKey: "answer_id"
  });

  User.hasOne(Ans, {
    foreignKey: "user_id"
  });

  Ans.belongsTo(User, {
    foreignKey: "user_id"
  });

  Ans.belongsTo(Card, {
    foreignKey: "user_id"
  });

  func_info = __F('info');

  func_user = __F('user');

  func_answer = {
    addComment: function(answer_id, user_id, user_nick, content, callback) {
      return Ans.find({
        where: {
          id: answer_id
        }
      }).success(function(ans) {
        if (!ans) {
          return callback(new Error('不存在的回答'));
        } else {
          ans.updateAttributes({
            comment_count: ans.comment_count * 1 + 1
          });
          return Comment.create({
            answer_id: answer_id,
            user_id: user_id,
            user_nick: user_nick,
            content: content
          }).success(function(comment) {
            var atname;
            func_info.add({
              target_user_id: ans.user_id,
              type: 2,
              source_user_id: user_id,
              source_user_nick: user_nick,
              time: new Date(),
              target_path: "/qa/" + ans.question_id + "#answer-" + ans.id,
              action_name: "【评论】了你的回答",
              target_path_name: ans.md.replace(/\s/g, " ").substr(0, 100),
              content: content
            });
            if (atname = content.match(/\@([^\s]*)/)) {
              atname = atname[1];
              func_user.getByNick(atname, function(error, user) {
                if (user) {
                  return func_info.add({
                    target_user_id: user.id,
                    type: 6,
                    source_user_id: user_id,
                    source_user_nick: user_nick,
                    time: new Date(),
                    target_path: "/qa/" + ans.question_id + "#answer-" + ans.id,
                    action_name: "在评论中【提到】了你",
                    target_path_name: "查看出处",
                    content: content
                  });
                }
              });
            }
            return callback(null, comment);
          }).error(function(e) {
            return callback(e);
          });
        }
      });
    },
    getCommentsByAnswerId: function(answer_id, callback) {
      return Comment.findAll({
        where: {
          answer_id: answer_id
        },
        order: "id",
        include: [User],
        raw: true
      }).success(function(answers) {
        return callback(null, answers);
      }).error(function(e) {
        return callback(e);
      });
    },
    getByQuestionId: function(q_id, page, count, condition, callback) {
      var query;
      query = {
        where: {
          question_id: q_id
        },
        offset: (page - 1) * count,
        limit: count,
        order: "zan_count desc,id",
        include: [AnsZanHistory, User]
      };
      if (condition) {
        query.where = condition;
      }
      return Ans.findAll(query).success(function(answers) {
        var answerUserIDs;
        answerUserIDs = [];
        answers.forEach(function(ans) {
          return answerUserIDs.push(ans.user_id);
        });
        return Card.findAll({
          where: {
            user_id: answerUserIDs
          },
          raw: true
        }).success(function(cards) {
          cards.forEach(function(card) {
            return answers.forEach(function(ans) {
              if (ans.user_id === card.user_id) {
                return ans.card = card;
              }
            });
          });
          return callback(null, answers);
        }).error(function() {
          return callback(null, answers);
        });
      }).error(function(e) {
        return callback(e);
      });
    },
    countByQuestionId: function(q_id, condition, callback) {
      var query;
      query = {};
      if (condition) {
        query.where = condition;
      }
      return Ans.count(query).success(function(count) {
        return callback(null, count);
      }).error(function(e) {
        return callback(e);
      });
    },
    add: function(data, callback) {
      return Question.find({
        where: {
          id: data.question_id
        }
      }).success(function(q) {
        if (!q) {
          return callback(new Error('不存在的问题'));
        } else {
          return Ans.create(data).success(function(ans) {
            q.updateAttributes({
              answer_count: q.answer_count * 1 + 1
            });
            return callback(null, q, ans);
          }).error(function(e) {
            return callback(e);
          });
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    getAllWithQuestion: function(page, count, condition, order, callback) {
      var query;
      query = {
        offset: (page - 1) * count,
        limit: count,
        order: order || "id desc",
        include: [Question],
        raw: true
      };
      if (condition) {
        query.where = condition;
      }
      return Ans.findAll(query).success(function(answers) {
        return callback(null, answers);
      }).error(function(e) {
        return callback(e);
      });
    },
    getByIdWithQuestion: function(id, callback) {
      return Ans.find({
        where: {
          id: id
        },
        include: [Question],
        raw: true
      }).success(function(ans) {
        if (!ans) {
          return callback(new Error('不存在的回答'));
        } else {
          return callback(null, ans);
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    getZan: function(answerId, callback) {
      return AnsZanHistory.findAll({
        where: {
          answer_id: answerId
        }
      }).success(function(his) {
        return callback(null, his);
      }).error(function(e) {
        return callback(e);
      });
    },
    addZan: function(answerId, user, callback) {
      return AnsZanHistory.find({
        where: {
          answer_id: answerId,
          user_id: user.id
        }
      }).success(function(his) {
        if (his) {
          return callback(new Error('已经给本回答点过赞了，如果你点上瘾了，那为毛放弃治疗！'));
        } else {
          AnsZanHistory.create({
            answer_id: answerId,
            user_id: user.id,
            user_nick: user.nick
          });
          return Ans.find({
            where: {
              id: answerId
            }
          }).success(function(card) {
            if (card) {
              card.updateAttributes({
                zan_count: card.zan_count ? card.zan_count + 1 : 1
              });
            }
            return callback(null, card);
          }).error(function(e) {
            return callback(e);
          });
        }
      });
    }
  };

  __FC(func_answer, Ans, ['getAll', 'getById', 'delete', 'update', 'count']);

  module.exports = func_answer;

}).call(this);
