// Generated by CoffeeScript 1.9.3
(function() {
  var Card, User, VisitLog, cache, func_user, pinyin;

  User = __M('users');

  User.sync();

  Card = __M('cards');

  Card.sync();

  VisitLog = __M('card_visit_log');

  VisitLog.sync();

  User.hasOne(Card, {
    foreignKey: "user_id"
  });

  pinyin = require('./../lib/PinYin.js');

  cache = {
    allNames: {
      data: [],
      time: 0
    }
  };

  func_user = {
    getAllNames: function(callback) {
      var nowTime;
      nowTime = new Date().getTime();
      if (nowTime - cache.allNames.time > 1000 * 60 * 60) {
        return User.findAll({
          order: 'nick'
        }).success(function(users) {
          var us;
          us = [];
          users.forEach(function(user) {
            return us.push({
              id: user.id,
              nick: user.nick,
              head_pic: user.head_pic,
              pinyin: pinyin(user.nick, {
                style: pinyin.STYLE_NORMAL
              }).join("")
            });
          });
          cache.allNames.data = us;
          cache.allNames.time = nowTime;
          return callback(null, us);
        }).error(function(e) {
          return callback(null, []);
        });
      } else {
        return callback(null, cache.allNames.data);
      }
    },
    getByUserIds: function(ids, callback) {
      return User.findAll({
        where: {
          id: ids
        },
        include: [Card]
      }).success(function(users) {
        return callback(null, users);
      }).error(function(error) {
        return callback(error);
      });
    },
    getByWeiboId: function(id, callback) {
      return User.find({
        where: {
          weibo_id: id
        }
      }).success(function(user) {
        return callback(null, user);
      }).error(function(error) {
        return callback(error);
      });
    },
    getByEmail: function(email, callback) {
      return User.find({
        where: {
          email: email
        }
      }).success(function(user) {
        if (!user) {
          return callback(new Error('不存在的邮箱'));
        } else {
          return callback(null, user);
        }
      }).error(function(error) {
        return callback(error);
      });
    },
    getByNick: function(nick, callback) {
      return User.find({
        where: {
          nick: nick
        }
      }).success(function(user) {
        if (!user) {
          return callback(new Error('不存在的用户昵称'));
        } else {
          return callback(null, user);
        }
      }).error(function(error) {
        return callback(error);
      });
    },
    connectCard: function(uid, cardId, callback) {
      return User.find({
        where: {
          id: uid
        }
      }).success(function(user) {
        if (user) {
          return Card.find({
            where: {
              id: cardId
            }
          }).success(function(card) {
            if (card && !card.user_id) {
              return card.updateAttributes({
                user_id: uid
              }).success(function() {
                return user.updateAttributes({
                  card_id: cardId,
                  weibo_name: user.nick,
                  nick: card.nick,
                  sex: card.sex,
                  desc: card.desc
                }).success(function() {
                  return callback(null, user, card);
                }).error(function(error) {
                  return callback(error);
                });
              }).error(function(error) {
                return callback(error);
              });
            } else {
              return callback(new Error('名片已经被关联'));
            }
          });
        } else {
          return callback(new Error('不存在的用户'));
        }
      }).error(function(error) {
        return callback(error);
      });
    },
    visitCard: function(userId, cardId, callback) {
      return User.find({
        where: {
          id: userId
        }
      }).success(function(u) {
        if (!u) {
          return callback(new Error('不存在的用户'));
        } else {
          return VisitLog.create({
            user_id: userId,
            card_id: cardId,
            user_nick: u.nick,
            user_headpic: u.head_pic
          }).success(function(log) {
            return callback(null, log);
          }).error(function(error) {
            return callback(error);
          });
        }
      }).error(function(error) {
        return callback(error);
      });
    }
  };

  __FC(func_user, User, ['update', 'count', 'delete', 'getById', 'getAll', 'add']);

  module.exports = func_user;

}).call(this);
