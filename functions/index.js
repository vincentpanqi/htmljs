// Generated by CoffeeScript 1.9.3
(function() {
  var Article, Card, Index, Question;

  Article = __M('articles');

  Question = __M('questions');

  Card = __M('cards');

  Index = __M('indexinfos');

  Index.sync();

  module.exports = {
    count: function(callback) {
      return Index.count().success(function(count) {
        return callback(null, count);
      }).error(function(e) {
        return callback(e);
      });
    },
    searchAll: function(keys, page, count, callback) {
      var arr, query_where;
      query_where = [];
      keys.forEach(function(key) {
        return query_where.push("CONCAT(`title`,`desc`,`user_nick`) like ?");
      });
      arr = [query_where.join(" and ")];
      keys.forEach(function(key) {
        return arr.push("%" + key + "%");
      });
      return Article.findAll({
        where: arr,
        offset: (page - 1) * count,
        limit: count,
        order: "id desc"
      }).success(function(articles) {
        res.locals.articles = articles;
        return Question.findAll({
          where: arr,
          offset: (page - 1) * count,
          limit: count,
          order: "id desc"
        }).success(function(articles) {
          return res.locals.articles = articles;
        });
      });
    },
    getAll: function(page, count, callback) {
      return sequelize.query("select indexinfo.createdAt AS createdAt,indexinfo.sort AS sort,indexinfo.id AS id, article.id as article_id, article.user_id as article_user_id, article.user_nick as article_user_nick, article.user_headpic as article_user_headpic , article.title as article_title, article.comment_count as article_comment_count, article.visit_count as article_visit_count, article.column_id as article_column_id, article.score as article_score, card.id as card_id, card.user_id as card_user_id, card.head_pic as card_head_pic, card.nick as card_nick, question.id as question_id, question.user_id as question_user_id, question.user_nick as question_user_nick, question.user_headpic as question_user_headpic , question.title as question_title, question.answer_count as question_answer_count, question.visit_count as question_visit_count, topic.id as topic_id, topic.user_id as topic_user_id, topic.user_nick as topic_user_nick, topic.user_headpic as topic_user_headpic , topic.title as topic_title, topic.comment_count as topic_comment_count, topic.visit_count as topic_visit_count, act.id as act_id, act.title as act_title, act.person_limit as act_person_limit, act.comment_count as act_comment_count, act.visit_count as act_visit_count from indexinfos indexinfo left join articles  article on article.uuid = indexinfo.info_id left join questions  question on question.uuid = indexinfo.info_id left join cards  card on card.uuid = indexinfo.info_id left join topics  topic on topic.uuid = indexinfo.info_id left join acts act on act.uuid = indexinfo.info_id order by indexinfo.sort desc,indexinfo.createdAt desc limit " + (page - 1) * count + "," + count + ";", null, {
        raw: true,
        redis: 10000
      }).success(function(data) {
        return callback(null, data);
      }).error(function(e) {
        return callback(e);
      });
    },
    add: function(id) {
      return Index.create({
        info_id: id
      });
    },
    update: function(id, data, callback) {
      return Index.find({
        where: {
          id: id
        }
      }).success(function(index) {
        if (!index) {
          return callback(new Error('no found'));
        } else {
          return index.updateAttributes(data).success(function() {
            return callback(null, index);
          }).error(function(e) {
            return callback(e);
          });
        }
      }).error(function(e) {
        return callback(e);
      });
    }
  };

}).call(this);
