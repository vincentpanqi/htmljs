// Generated by CoffeeScript 1.9.3
(function() {
  var SearchHis, config, hises, hisestime, search;

  SearchHis = __M('search_his');

  SearchHis.sync();

  config = require('./../config.coffee');

  hises = {};

  hisestime = 0;

  search = {
    add: function(data, callback) {
      var childProcess;
      childProcess = require('child_process');
      return childProcess.execFile("php", [config.xunsearch_bin + "/action/add.php", encodeURIComponent(JSON.stringify(data))], function(err, stdout, stderr) {
        return callback(stderr, stdout);
      });
    },
    query: function(data, callback) {
      var childProcess;
      SearchHis.find({
        where: {
          word: data.query
        }
      }).success(function(w) {
        if (w) {
          return w.updateAttributes({
            count: w.count + 1
          });
        } else {
          return SearchHis.create({
            word: data.query,
            count: 1
          });
        }
      });
      childProcess = require('child_process');
      return childProcess.execFile("php", [config.xunsearch_bin + "/action/query.php", encodeURIComponent(JSON.stringify(data))], function(err, stdout, stderr) {
        return callback(stderr, stdout);
      });
    },
    addHis: function(data, callback) {
      return SearchHis.find({
        where: {
          word: data.word
        }
      }).success(function(w) {
        if (w) {
          return w.updateAttributes({
            count: w.count + 1
          });
        } else if (w.length > 2) {
          return SearchHis.create({
            word: data.word,
            count: 1
          });
        }
      });
    },
    getAll: function(page, count, condition, order, include, callback) {
      var nowtime, query;
      if (arguments.length === 4) {
        callback = order;
        order = null;
        include = null;
      } else if (arguments.length === 5) {
        callback = include;
        include = null;
      }
      query = {
        offset: (page - 1) * count,
        limit: count,
        order: order || "id desc",
        raw: true
      };
      if (condition) {
        query.where = condition;
      }
      if (include) {
        query.include = include;
      }
      nowtime = new Date().getTime();
      if (nowtime - hisestime < 1000 * 60 * 60 * 24 && hises[page * count]) {
        return callback(null, hises[page * count]);
      } else {
        hisestime = nowtime;
        return SearchHis.findAll(query).success(function(ms) {
          hises[page * count] = ms;
          return callback(null, ms);
        }).error(function(e) {
          return callback(e);
        });
      }
    }
  };

  __FC(search, SearchHis, ['count']);

  module.exports = search;

}).call(this);
