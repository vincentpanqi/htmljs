// Generated by CoffeeScript 1.9.3
(function() {
  var Article, Card, Column, ColumnRss, ColumnUsers, User, func_column, func_email;

  Column = __M('columns');

  User = __M("users");

  Card = __M('cards');

  Article = __M('articles');

  User.hasOne(Column, {
    foreignKey: "user_id"
  });

  Column.belongsTo(User, {
    foreignKey: "user_id"
  });

  Column.hasMany(Article, {
    foreignKey: "column_id",
    as: "articles"
  });

  Column.sync();

  ColumnRss = __M('column_rsses');

  ColumnRss.belongsTo(Card, {
    foreignKey: "user_id"
  });

  ColumnRss.sync();

  ColumnUsers = __M('article/column_users');

  User.hasOne(ColumnUsers, {
    foreignKey: "user_id"
  });

  ColumnUsers.belongsTo(User, {
    foreignKey: "user_id"
  });

  ColumnUsers.sync();

  func_email = __F('email');

  func_column = {
    getAll: function(page, count, condition, order, include, callback) {
      var query;
      if (arguments.length === 4) {
        callback = order;
        order = null;
        include = null;
      } else if (arguments.length === 5) {
        callback = include;
        include = null;
      }
      query = {
        offset: (page - 1) * count,
        limit: count,
        order: order,
        include: [User],
        raw: true
      };
      if (condition) {
        query.where = condition;
      }
      return Column.findAll(query).success(function(result_columns) {
        return callback(null, result_columns);
      }).error(function(e) {
        return callback(e);
      });
    },
    getAllWithArticle: function(page, count, condition, desc, user_id, callback) {
      var query;
      query = {
        offset: (page - 1) * count,
        limit: count,
        order: desc ? desc : "article_count desc"
      };
      if (condition) {
        query.where = condition;
      }
      return Column.findAll(query).success(function(result_columns) {
        var ids;
        ids = [];
        result_columns.forEach(function(column) {
          return ids.push(column.id);
        });
        return Article.findAll({
          where: {
            column_id: ids
          },
          order: "id desc",
          raw: true
        }).success(function(articles) {
          var columns;
          columns = [];
          result_columns.forEach(function(col) {
            return columns.push(col.selectedValues);
          });
          columns.forEach(function(column) {
            column.articles = [];
            return articles.forEach(function(article) {
              if (column.id === article.column_id) {
                return column.articles.push(article);
              }
            });
          });
          if (user_id) {
            return ColumnRss.findAll({
              where: {
                column_id: ids,
                user_id: user_id
              },
              raw: true
            }).success(function(rss_logs) {
              rss_logs.forEach(function(log) {
                return columns.forEach(function(col) {
                  if (col.id === log.column_id) {
                    return col.is_rssed = true;
                  }
                });
              });
              return callback(null, columns);
            }).error(function(e) {
              return callback(e);
            });
          } else {
            return callback(null, columns);
          }
        }).error(function(e) {
          return callback(e);
        });
      }).error(function(error) {
        return callback(error);
      });
    },
    getById: function(id, callback) {
      return Column.find({
        where: {
          id: id
        },
        include: [User],
        raw: true
      }).success(function(column) {
        return callback(null, column);
      }).error(function(e) {
        return callback(e);
      });
    },
    addRss: function(column_id, user_id, callback) {
      return ColumnRss.find({
        where: {
          column_id: column_id,
          user_id: user_id
        },
        raw: true
      }).success(function(rss) {
        if (rss) {
          return callback(new Error('已经订阅过此专栏'));
        } else {
          func_column.addCount(column_id, "rss_count", function() {});
          return ColumnRss.create({
            user_id: user_id,
            column_id: column_id,
            uuid: uuid.v4()
          }).success(function(rss) {
            return callback(null, rss);
          }).error(function(e) {
            return callback(e);
          });
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    getRsses: function(column_id, callback) {
      return sequelize.query("SELECT `column_rsses`.*, `cards`.`email` AS `cards.email`,`cards`.`nick` AS `cards.nick` FROM `column_rsses` LEFT OUTER JOIN `cards` AS `cards` ON `cards`.`user_id` = `column_rsses`.`user_id` WHERE `column_rsses`.`column_id`='" + column_id + "';", null, {
        raw: true,
        redis: 10000
      }).success(function(data) {
        return callback(null, data);
      }).error(function(e) {
        return callback(e);
      });
    },
    getRssesByUserId: function(user_id, callback) {
      return ColumnRss.findAll({
        where: {
          user_id: user_id
        },
        raw: true
      }).success(function(rsses) {
        return callback(null, rsses);
      }).error(function(e) {
        return callback(e);
      });
    },
    getUsersRss: function(column_id, user_id, callback) {
      return ColumnRss.find({
        where: {
          column_id: column_id,
          user_id: user_id
        },
        raw: true
      }).success(function(rss) {
        if (rss) {
          return callback(null, rss);
        } else {
          return callback(new Error('没有订阅过此专栏'));
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    getColumnUsers: function(column_id, callback) {
      return ColumnUsers.findAll({
        where: {
          column_id: column_id
        },
        include: [User]
      }).success(function(users) {
        return callback(null, users);
      }).error(function(e) {
        return callback(e);
      });
    },
    addColumnUser: function(column_id, user_nick, callback) {
      return User.find({
        where: {
          nick: user_nick
        }
      }).success(function(user) {
        if (!user) {
          return callback(new Error('不存在的用户'));
        } else {
          return ColumnUsers.create({
            column_id: column_id,
            user_id: user.id,
            user_nick: user.nick,
            user_headpic: user.head_pic
          }).success(function() {
            return callback(null);
          }).error(function(e) {
            return callback(e);
          });
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    checkNotify: function(column_id) {
      return Column.find({
        where: {
          id: column_id
        }
      }).success(function(column) {
        if (column) {
          return Card.find({
            where: {
              user_id: column.user_id
            }
          }).success(function(card) {
            if (card && card.email) {
              func_email.sendColumnNotify(column, card);
              return column.updateAttributes({
                last_notify_time: new Date().getTime()
              });
            }
          });
        }
      });
    }
  };

  __FC(func_column, Column, ['delete', 'add', 'addCount', 'count', 'update']);

  module.exports = func_column;

}).call(this);
