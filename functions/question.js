// Generated by CoffeeScript 1.9.3
(function() {
  var Answer, Question, QuestionEditHistory, QuestionTag, Tag, User, func_question;

  Question = __M('questions');

  User = __M('users');

  Tag = __M('tags');

  Answer = __M('answers');

  QuestionTag = __M('question_tag');

  QuestionTag.sync();

  User.hasOne(Question, {
    foreignKey: "user_id"
  });

  Question.belongsTo(User, {
    foreignKey: "user_id"
  });

  QuestionEditHistory = __M('qa_edit_history');

  User.hasOne(QuestionEditHistory, {
    foreignKey: "user_id"
  });

  QuestionEditHistory.belongsTo(User, {
    foreignKey: "user_id"
  });

  QuestionEditHistory.sync();

  Answer.hasOne(Question, {
    foreignKey: "good_answer_id"
  });

  Question.belongsTo(Answer, {
    foreignKey: "good_answer_id"
  });

  Question.sync();

  User.sync();

  Tag.sync();

  func_question = {
    path: __filename,
    getAllEditHistory: function(q_id, callback) {
      return QuestionEditHistory.findAll({
        where: {
          question_id: q_id
        },
        order: "id desc",
        include: [User],
        raw: true
      }).success(function(his) {
        return callback(null, his);
      }).error(function(e) {
        return callback(e);
      });
    },
    addEditHistory: function(q_id, user_id, reason, callback) {
      return QuestionEditHistory.create({
        question_id: q_id,
        user_id: user_id,
        reason: reason
      }).success(function(qeh) {
        return callback(null, qeh);
      }).error(function(e) {
        return callback(e);
      });
    },
    getById: function(id, callback) {
      return Question.find({
        where: {
          id: id
        },
        include: [User],
        raw: true
      }).success(function(q) {
        if (!q) {
          return callback(new Error('不存在的问题'));
        } else {
          return callback(null, q);
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    getByPinyin: function(pinyin, callback) {
      return Question.find({
        where: {
          pinyin: pinyin
        },
        include: [User],
        raw: true
      }).success(function(q) {
        if (!q) {
          return callback(new Error('不存在的问题'));
        } else {
          return callback(null, q);
        }
      }).error(function(e) {
        return callback(e);
      });
    },
    addTagsToQuestion: function(question_id, tagIds) {
      return QuestionTag.findAll({
        where: {
          questionId: question_id
        }
      }).success(function(qts) {
        qts.forEach(function(qt) {
          return qt.destroy();
        });
        return tagIds.forEach(function(tagid) {
          return QuestionTag.create({
            questionId: question_id,
            tagId: tagid
          });
        });
      });
    },
    getAllWithAnswer: function(page, count, condition, order, callback) {
      var query;
      query = {
        offset: (page - 1) * count,
        limit: count,
        order: order || "id desc",
        include: [User, Answer],
        raw: true
      };
      if (condition) {
        query.where = condition;
      }
      return Question.findAll(query).success(function(ms) {
        return callback(null, ms);
      }).error(function(e) {
        return callback(e);
      });
    },
    addComment: function(id) {
      return Question.find({
        where: {
          id: id
        }
      }).success(function(q) {
        if (q) {
          return q.updateAttributes({
            comment_count: q.comment_count ? q.comment_count + 1 : 1
          });
        }
      }).error(function(e) {});
    }
  };

  module.exports = __FC(func_question, Question, ['delete', 'getAll', 'update', 'add', 'count', 'addCount']);

}).call(this);
